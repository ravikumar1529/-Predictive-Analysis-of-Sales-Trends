import pandas as pd

# Load the sales data into a DataFrame
sales_data = pd.read_csv('sales_data.csv')
# Handle missing values
sales_data = sales_data.dropna()

# Encode categorical variables (e.g., product category)
sales_data = pd.get_dummies(sales_data, columns=['product_category'])

# Scale numerical features (e.g., price)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
sales_data['price'] = scaler.fit_transform(sales_data[['price']])
import matplotlib.pyplot as plt
import seaborn as sns

# Visualize sales trends over time
plt.figure(figsize=(12, 6))
sns.lineplot(x='date', y='sales_volume', data=sales_data)
plt.xlabel('Date')
plt.ylabel('Sales Volume')
plt.title('Sales Trends Over Time')
plt.show()
# Create a 7-day moving average of sales volume
sales_data['7_day_avg_sales'] = sales_data['sales_volume'].rolling(window=7).mean()

# Create lag features for sales volume (e.g., lag 1, lag 7)
sales_data['lag_1_sales'] = sales_data['sales_volume'].shift(1)
sales_data['lag_7_sales'] = sales_data['sales_volume'].shift(7)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Split the data into training and testing sets
X = sales_data[['price', '7_day_avg_sales', 'lag_1_sales', 'lag_7_sales']]
y = sales_data['sales_volume']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
